What happens when you initialize a repository? Why do you need to do it?

A new, hidden, directory called .git is created in the working directory. That is the repository. It will host metadata recording the history of changes of the files being tracked. 

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is not a directory, but rather it seems to me like a virtual area where you can filter the files and get them ready for a commit.

How can you use the staging area to make sure you have one commit per logical
change?

By placing a modified file in the staging area, we allow for comparison between the modified version and the latest version of the document. This way we can clearly see what the changes are, and thus make sure they make up a coherent and cohesive logical unit. Otherwise there would be no way of comparing the new version of the document with the latest commit to the git repository.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches allow us to experiment with changes we are still not sure we would like to make to the "official" version of a project.

How do the diagrams help you visualize the branch structure?

As branches begin to multiply, it can be hard to mentally keep track of all of them. Diagrams are a good way of visualising the ramifications that branch off the master branch, the points where they articulate with the master, and the commits made on each branch independently from the others.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

Merging two branches together results in a single branch. This branch is labelled as one of the two, the one that was checked out at merging time. The last commit is the merge operation. The commits on the secondary branch are still reachable from the merged branch, because the merging commit has two parents, namely the two commits that were last on each of the two branches being merged. 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
