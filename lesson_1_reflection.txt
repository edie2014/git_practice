How did viewing a diff between two versions of a file help you see the bug that
was introduced?

   The difference between the two files was due to a misspelling.
   Diff located the lines which contained the difference, and displayed them side by side.
   It was easy then to locate the exact difference, and thus the bug.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

   The edit history of the file reflects the coding style of its author. It can thus provide insight into the weaknesses they need to address.
   On a team project, each member's contribution can be traced. Amont other benefits, this can help programmers learn from one another.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

   On the good side, commits have more chances of being clear logical units.
   On the negative side, the author may wait too long between commits, or, on the contrary, commit too often.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

   Tracing changes in a bunch of related files is particularly suited to programming projects, since code is often spread over several files. This is less often the case with regular text files.

How can you use the commands git log and git diff to view the history of files?

   Git log lists all the commits in reverse chronological order.
   Git diff highlights what is new in a commit compared to the previous one.  

How might using version control make you more confident to make changes that
could break something?

   Knowing I can always revert to the version of the code just before the risky change, I am confident I can safely experiment then recover the old version if anything goes wrong. 

Now that you have your workspace set up, what do you want to try using Git for?

   I will use Git for my programming projects, but also for any other work I might be doing (writing a paper, writing my thesis, etc.). 
